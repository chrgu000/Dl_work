using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.InteropServices;

//需要添加以下命名空间
using UFIDA.U8.MomServiceCommon;
using UFIDA.U8.U8MOMAPIFramework;
using UFIDA.U8.U8APIFramework;
using UFIDA.U8.U8APIFramework.Meta;
using UFIDA.U8.U8APIFramework.Parameter;
using MSXML2;
using U8API.Entity;

namespace U8APIProject
{
    /// <summary>
    /// 产成品入库单API
    /// </summary>
    public class DOMAPI10
    {
        /// <summary>
        /// 增加单据
        /// </summary>
        /// <param name="u8Login"></param>
        /// <param name="hd"></param>
        /// <param name="bds"></param>
        /// <returns></returns>
        public APIRet Add(Object u8Login, API10Hd hd, List<API10Bd> bds)
        {
            //API返回对象
            APIRet apiRet = new APIRet();

            //第二步：构造环境上下文对象，传入login，并按需设置其它上下文参数
            U8EnvContext envContext = new U8EnvContext();
            envContext.U8Login = u8Login as U8Login.clsLogin;

            //第三步：设置API地址标识(Url)
            //当前API：添加新单据的地址标识为：U8API/ProductIn/Add
            U8ApiAddress myApiAddress = new U8ApiAddress("U8API/ProductIn/Add");

            //第四步：构造APIBroker
            U8ApiBroker broker = new U8ApiBroker(myApiAddress, envContext);

            //第五步：API参数赋值
            //给普通参数sVouchType赋值。此参数的数据类型为System.String，此参数按值传递，表示单据类型：10
            broker.AssignNormalValue("sVouchType", "10");

            //给BO表头参数DomHead赋值，此BO参数的业务类型为不合格品处理单，属表头参数。BO参数均按引用传递
            //提示：给BO表头参数DomHead赋值有两种方法
            //方法一是直接传入MSXML2.DOMDocumentClass对象
            //-------------------------------------------------------------------------------------------------------
            ADODB.Connection conn = new ADODB.ConnectionClass();
            ADODB.Recordset rs = new ADODB.RecordsetClass();
            MSXML2.DOMDocument domhead = new MSXML2.DOMDocumentClass();
            string strConn = envContext.U8Login.UfDbName;
            conn.Open(strConn, "sa", envContext.U8Login.SysPassword, 0);
            string sql = "select top 1 * from RecordInQ where id=18";
            rs.Open(sql, conn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockOptimistic, -1);

            rs.Save(domhead, ADODB.PersistFormatEnum.adPersistXML);
            U8APIHelper.FormatDom(ref domhead, "A");
            broker.AssignNormalValue("DomHead", domhead);

            /****************************** 以下是必输字段 ****************************/
            ENUtil.SetToDomH(domhead, "id", "");//主关键字段，int类型
            ENUtil.SetToDomH(domhead, "ccode", "0000000001");//入库单号，string类型
            ENUtil.SetToDomH(domhead, "ddate", hd.ddate);//入库日期，DateTime类型
            ENUtil.SetToDomH(domhead, "cwhcode", hd.cwhcode);//仓库编码，string类型
            ENUtil.SetToDomH(domhead, "cwhname", hd.cwhname);//仓库，string类型
            ENUtil.SetToDomH(domhead, "csysbarcode", "");//单据条码，string类型
            ENUtil.SetToDomH(domhead, "chinvsn", "");//序列号，string类型
            ENUtil.SetToDomH(domhead, "csource", hd.csource);//单据来源，int类型
            ENUtil.SetToDomH(domhead, "crdname", hd.crdname);//入库类别，string类型
            /***************************** 以下是非必输字段 ****************************/
            ENUtil.SetToDomH(domhead, "cmodifyperson", hd.cmodifyperson);//修改人，string类型
            ENUtil.SetToDomH(domhead, "dmodifydate", hd.dmodifydate);//修改日期，DateTime类型
            ENUtil.SetToDomH(domhead, "dnmaketime", hd.dnmaketime);//制单时间，DateTime类型
            ENUtil.SetToDomH(domhead, "dnmodifytime", hd.dnmodifytime);//修改时间，DateTime类型
            ENUtil.SetToDomH(domhead, "dnverifytime", hd.dnverifytime);//审核时间，DateTime类型
            ENUtil.SetToDomH(domhead, "dchkdate", hd.dchkdate);//检验日期，DateTime类型
            ENUtil.SetToDomH(domhead, "iavaquantity", hd.iavaquantity);//可用量，string类型
            ENUtil.SetToDomH(domhead, "iavanum", hd.iavanum);//可用件数，string类型
            ENUtil.SetToDomH(domhead, "ipresentnum", hd.ipresentnum);//现存件数，string类型
            ENUtil.SetToDomH(domhead, "ufts", hd.ufts);//时间戳，string类型
            ENUtil.SetToDomH(domhead, "cpspcode", hd.cpspcode);//产品，string类型
            ENUtil.SetToDomH(domhead, "iproorderid", hd.iproorderid);//生产订单ID，string类型
            ENUtil.SetToDomH(domhead, "cmpocode", hd.cmpocode);//生产订单号，string类型
            ENUtil.SetToDomH(domhead, "cprobatch", hd.cprobatch);//生产批号，string类型
            ENUtil.SetToDomH(domhead, "iverifystate", hd.iverifystate);//iverifystate，string类型
            ENUtil.SetToDomH(domhead, "iswfcontrolled", hd.iswfcontrolled);//iswfcontrolled，string类型
            ENUtil.SetToDomH(domhead, "ireturncount", hd.ireturncount);//ireturncount，string类型
            ENUtil.SetToDomH(domhead, "cdepname", hd.cdepname);//部门，string类型    
            ENUtil.SetToDomH(domhead, "dveridate", hd.dveridate);//审核日期，DateTime类型
            ENUtil.SetToDomH(domhead, "cmemo", hd.cmemo);//备注，string类型
            ENUtil.SetToDomH(domhead, "cchkperson", hd.cchkperson);//检验员，string类型
            ENUtil.SetToDomH(domhead, "cmaker", hd.cmaker);//制单人，string类型
            ENUtil.SetToDomH(domhead, "chandler", hd.chandler);//审核人，string类型
            ENUtil.SetToDomH(domhead, "itopsum", hd.itopsum);//最高库存量，string类型
            ENUtil.SetToDomH(domhead, "caccounter", hd.caccounter);//记账人，string类型
            ENUtil.SetToDomH(domhead, "ilowsum", hd.ilowsum);//最低库存量，string类型
            ENUtil.SetToDomH(domhead, "ipresent", hd.ipresent);//现存量，string类型
            ENUtil.SetToDomH(domhead, "isafesum", hd.isafesum);//安全库存量，string类型
            ENUtil.SetToDomH(domhead, "cbustype", hd.cbustype);//业务类型，int类型
            ENUtil.SetToDomH(domhead, "cpersonname", hd.cpersonname);//业务员，string类型
            ENUtil.SetToDomH(domhead, "cdefine1", hd.cdefine1);//表头自定义项1，string类型
            ENUtil.SetToDomH(domhead, "cdefine11", hd.cdefine11);//表头自定义项11，string类型
            ENUtil.SetToDomH(domhead, "cdefine12", hd.cdefine12);//表头自定义项12，string类型
            ENUtil.SetToDomH(domhead, "cdefine13", hd.cdefine13);//表头自定义项13，string类型
            ENUtil.SetToDomH(domhead, "cdefine14", hd.cdefine14);//表头自定义项14，string类型
            ENUtil.SetToDomH(domhead, "cdefine2", hd.cdefine2);//表头自定义项2，string类型
            ENUtil.SetToDomH(domhead, "cdefine3", hd.cdefine3);//表头自定义项3，string类型
            ENUtil.SetToDomH(domhead, "cdefine5", hd.cdefine5);//表头自定义项5，int类型
            ENUtil.SetToDomH(domhead, "cdefine15", hd.cdefine15);//表头自定义项15，int类型
            ENUtil.SetToDomH(domhead, "cdefine6", hd.cdefine6);//表头自定义项6，DateTime类型
            ENUtil.SetToDomH(domhead, "brdflag", hd.brdflag);//收发标志，string类型
            ENUtil.SetToDomH(domhead, "cdefine7", hd.cdefine7);//表头自定义项7，double类型
            ENUtil.SetToDomH(domhead, "cdefine16", hd.cdefine16);//表头自定义项16，double类型
            ENUtil.SetToDomH(domhead, "cdefine8", hd.cdefine8);//表头自定义项8，string类型
            ENUtil.SetToDomH(domhead, "cdefine9", hd.cdefine9);//表头自定义项9，string类型
            ENUtil.SetToDomH(domhead, "cdefine10", hd.cdefine10);//表头自定义项10，string类型
            ENUtil.SetToDomH(domhead, "cvouchtype", hd.cvouchtype);//单据类型，string类型
            ENUtil.SetToDomH(domhead, "crdcode", hd.crdcode);//入库类别编码，string类型
            ENUtil.SetToDomH(domhead, "cdepcode", hd.cdepcode);//部门编码，string类型
            ENUtil.SetToDomH(domhead, "cpersoncode", hd.cpersoncode);//业务员编码，string类型
            ENUtil.SetToDomH(domhead, "vt_id", hd.vt_id);//模版号，int类型
            ENUtil.SetToDomH(domhead, "cdefine4", hd.cdefine4);//表头自定义项4，DateTime类型

            //方法一是直接传入MSXML2.DOMDocumentClass对象
            MSXML2.DOMDocument domBody = new MSXML2.DOMDocumentClass();
            ADODB.Recordset rs1 = new ADODB.RecordsetClass();
            sql = "select top 1 * from RecordInSQ where id=18";
            rs1.Open(sql, conn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockOptimistic, -1);

            rs1.Save(domBody, ADODB.PersistFormatEnum.adPersistXML);
            U8APIHelper.FormatDom(ref domBody, "A");
            broker.AssignNormalValue("domBody", domBody);

            int rownum = 0;
            foreach (API10Bd bd in bds)
            {
                ENUtil.SetToDomB(domBody, rownum, "autoid", "");//主关键字段，int类型
                ENUtil.SetToDomB(domBody, rownum, "cinvcode", bd.cinvcode);//产品编码，string类型
                ENUtil.SetToDomB(domBody, rownum, "ccheckcode", bd.ccheckcode);//检验单号，string类型
                ENUtil.SetToDomB(domBody, rownum, "icheckidbaks", bd.icheckidbaks);//检验单子表id，string类型
                ENUtil.SetToDomB(domBody, rownum, "crejectcode", bd.crejectcode);//不良品处理单号，string类型
                ENUtil.SetToDomB(domBody, rownum, "irejectids", bd.irejectids);//不良品处理单id，string类型
                ENUtil.SetToDomB(domBody, rownum, "ccheckpersonname", bd.ccheckpersonname);//检验员，string类型
                ENUtil.SetToDomB(domBody, rownum, "dcheckdate", bd.dcheckdate);//检验日期，string类型
                ENUtil.SetToDomB(domBody, rownum, "ccheckpersoncode", bd.ccheckpersoncode);//检验员编码，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvouchtype", bd.cinvouchtype);//对应入库单类型，string类型
                ENUtil.SetToDomB(domBody, rownum, "outcopiedquantity", bd.outcopiedquantity);//已复制数量，string类型
                ENUtil.SetToDomB(domBody, rownum, "cbsysbarcode", bd.cbsysbarcode);//单据行条码，string类型
                ENUtil.SetToDomB(domBody, rownum, "cbmemo", bd.cbmemo);//备注，string类型
                ENUtil.SetToDomB(domBody, rownum, "irowno", rownum + 1);//行号，string类型
                ENUtil.SetToDomB(domBody, rownum, "cbinvsn", bd.cbinvsn);//序列号，string类型
                ENUtil.SetToDomB(domBody, rownum, "strowguid", bd.strowguid);//rowguid，string类型
                ENUtil.SetToDomB(domBody, rownum, "cservicecode", bd.cservicecode);//服务单号，string类型
                ENUtil.SetToDomB(domBody, rownum, "cplanlotcode", bd.cplanlotcode);//计划批号，string类型
                ENUtil.SetToDomB(domBody, rownum, "taskguid", bd.taskguid);//taskguid，string类型
                ENUtil.SetToDomB(domBody, rownum, "iinvsncount", bd.iinvsncount);//已指定序列号量，string类型
                /***************************** 以下是非必输字段 ****************************/
                ENUtil.SetToDomB(domBody, rownum, "id", "");//与主表关联项，int类型
                ENUtil.SetToDomB(domBody, rownum, "cinvaddcode", bd.cinvaddcode);//产品代码，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvname", bd.cinvname);//产品名称，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvstd", bd.cinvstd);//规格型号，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvm_unit", bd.cinvm_unit);//主计量单位，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinva_unit", bd.cinva_unit);//库存单位，string类型
                ENUtil.SetToDomB(domBody, rownum, "creplaceitem", bd.creplaceitem);//替换件，string类型
                ENUtil.SetToDomB(domBody, rownum, "cposition", bd.cposition);//货位编码，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvdefine1", bd.cinvdefine1);//存货自定义项1，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvdefine2", bd.cinvdefine2);//存货自定义项2，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvdefine3", bd.cinvdefine3);//存货自定义项3，string类型
                ENUtil.SetToDomB(domBody, rownum, "cfree1", bd.cfree1);//存货自由项1，string类型
                ENUtil.SetToDomB(domBody, rownum, "cbatchproperty1", bd.cbatchproperty1);//批次属性1，double类型
                ENUtil.SetToDomB(domBody, rownum, "cbatchproperty2", bd.cbatchproperty2);//批次属性2，double类型
                ENUtil.SetToDomB(domBody, rownum, "cfree2", bd.cfree2);//存货自由项2，string类型
                ENUtil.SetToDomB(domBody, rownum, "cbatch", bd.cbatch);//批号，string类型
                ENUtil.SetToDomB(domBody, rownum, "iinvexchrate", bd.iinvexchrate);//换算率，double类型
                ENUtil.SetToDomB(domBody, rownum, "inum", bd.inum);//件数，double类型
                ENUtil.SetToDomB(domBody, rownum, "iquantity", bd.iquantity);//数量，double类型
                ENUtil.SetToDomB(domBody, rownum, "iunitcost", bd.iunitcost);//单价，double类型
                ENUtil.SetToDomB(domBody, rownum, "iprice", bd.iprice);//金额，double类型
                ENUtil.SetToDomB(domBody, rownum, "ipunitcost", bd.ipunitcost);//计划单价，double类型
                ENUtil.SetToDomB(domBody, rownum, "ipprice", bd.ipprice);//计划金额，double类型
                ENUtil.SetToDomB(domBody, rownum, "dvdate", bd.dvdate);//失效日期，DateTime类型
                ENUtil.SetToDomB(domBody, rownum, "isoutquantity", bd.isoutquantity);//累计出库数量，double类型
                ENUtil.SetToDomB(domBody, rownum, "isoutnum", bd.isoutnum);//累计出库件数，double类型
                ENUtil.SetToDomB(domBody, rownum, "dsdate", bd.dsdate);//结算日期，DateTime类型
                ENUtil.SetToDomB(domBody, rownum, "ifquantity", bd.ifquantity);//实际数量，double类型
                ENUtil.SetToDomB(domBody, rownum, "ifnum", bd.ifnum);//实际件数，double类型
                ENUtil.SetToDomB(domBody, rownum, "cvouchcode", bd.cvouchcode);//对应入库单id，string类型
                ENUtil.SetToDomB(domBody, rownum, "cfree3", bd.cfree3);//存货自由项3，string类型
                ENUtil.SetToDomB(domBody, rownum, "cbatchproperty3", bd.cbatchproperty3);//批次属性3，double类型
                ENUtil.SetToDomB(domBody, rownum, "cbatchproperty4", bd.cbatchproperty4);//批次属性4，double类型
                ENUtil.SetToDomB(domBody, rownum, "cfree4", bd.cfree4);//存货自由项4，string类型
                ENUtil.SetToDomB(domBody, rownum, "cfree5", bd.cfree5);//存货自由项5，string类型
                ENUtil.SetToDomB(domBody, rownum, "cbatchproperty5", bd.cbatchproperty5);//批次属性5，double类型
                ENUtil.SetToDomB(domBody, rownum, "cbatchproperty6", bd.cbatchproperty6);//批次属性6，string类型
                ENUtil.SetToDomB(domBody, rownum, "cfree6", bd.cfree6);//存货自由项6，string类型
                ENUtil.SetToDomB(domBody, rownum, "cfree7", bd.cfree7);//存货自由项7，string类型
                ENUtil.SetToDomB(domBody, rownum, "cbatchproperty7", bd.cbatchproperty7);//批次属性7，string类型
                ENUtil.SetToDomB(domBody, rownum, "cbatchproperty8", bd.cbatchproperty8);//批次属性8，string类型
                ENUtil.SetToDomB(domBody, rownum, "cfree8", bd.cfree8);//存货自由项8，string类型
                ENUtil.SetToDomB(domBody, rownum, "cfree9", bd.cfree9);//存货自由项9，string类型
                ENUtil.SetToDomB(domBody, rownum, "cbatchproperty9", bd.cbatchproperty9);//批次属性9，string类型
                ENUtil.SetToDomB(domBody, rownum, "cbatchproperty10", bd.cbatchproperty10);//批次属性10，DateTime类型
                ENUtil.SetToDomB(domBody, rownum, "cfree10", bd.cfree10);//存货自由项10，string类型
                ENUtil.SetToDomB(domBody, rownum, "cdefine36", bd.cdefine36);//表体自定义项15，DateTime类型
                ENUtil.SetToDomB(domBody, rownum, "cdefine37", bd.cdefine37);//表体自定义项16，DateTime类型
                ENUtil.SetToDomB(domBody, rownum, "cinvdefine13", bd.cinvdefine13);//存货自定义项13，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvdefine14", bd.cinvdefine14);//存货自定义项14，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvdefine15", bd.cinvdefine15);//存货自定义项15，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvdefine16", bd.cinvdefine16);//存货自定义项16，string类型
                ENUtil.SetToDomB(domBody, rownum, "inquantity", bd.inquantity);//应收数量，double类型
                ENUtil.SetToDomB(domBody, rownum, "innum", bd.innum);//应收件数，double类型
                ENUtil.SetToDomB(domBody, rownum, "dmadedate", bd.dmadedate);//生产日期，DateTime类型
                ENUtil.SetToDomB(domBody, rownum, "impoids", bd.impoids);//生产订单子表ID，int类型
                ENUtil.SetToDomB(domBody, rownum, "icheckids", bd.icheckids);//检验单子表ID，int类型
                ENUtil.SetToDomB(domBody, rownum, "isodid", bd.isodid);//销售订单子表ID，string类型
                ENUtil.SetToDomB(domBody, rownum, "brelated", bd.brelated);//是否联副产品，int类型
                ENUtil.SetToDomB(domBody, rownum, "cbvencode", bd.cbvencode);//供应商编码，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvouchcode", bd.cinvouchcode);//对应入库单号，string类型
                ENUtil.SetToDomB(domBody, rownum, "cvenname", bd.cvenname);//供应商，string类型
                ENUtil.SetToDomB(domBody, rownum, "imassdate", bd.imassdate);//保质期，int类型
                ENUtil.SetToDomB(domBody, rownum, "cassunit", bd.cassunit);//库存单位码，string类型
                ENUtil.SetToDomB(domBody, rownum, "corufts", bd.corufts);//对应单据时间戳，string类型
                ENUtil.SetToDomB(domBody, rownum, "cposname", bd.cposname);//货位，string类型
                ENUtil.SetToDomB(domBody, rownum, "cmolotcode", bd.cmolotcode);//生产批号，string类型
                ENUtil.SetToDomB(domBody, rownum, "cmassunit", bd.cmassunit);//保质期单位，int类型
                ENUtil.SetToDomB(domBody, rownum, "csocode", bd.csocode);//需求跟踪号，string类型
                ENUtil.SetToDomB(domBody, rownum, "cmocode", bd.cmocode);//生产订单号，string类型
                ENUtil.SetToDomB(domBody, rownum, "cvmivencode", bd.cvmivencode);//代管商代码，string类型
                ENUtil.SetToDomB(domBody, rownum, "cvmivenname", bd.cvmivenname);//代管商，string类型
                ENUtil.SetToDomB(domBody, rownum, "bvmiused", bd.bvmiused);//代管消耗标识，int类型
                ENUtil.SetToDomB(domBody, rownum, "ivmisettlequantity", bd.ivmisettlequantity);//代管挂账确认单数量，double类型
                ENUtil.SetToDomB(domBody, rownum, "ivmisettlenum", bd.ivmisettlenum);//代管挂账确认单件数，double类型
                ENUtil.SetToDomB(domBody, rownum, "cdemandmemo", bd.cdemandmemo);//需求分类代号说明，string类型
                ENUtil.SetToDomB(domBody, rownum, "iordertype", bd.iordertype);//销售订单类别，int类型
                ENUtil.SetToDomB(domBody, rownum, "iorderdid", bd.iorderdid);//iorderdid，int类型
                ENUtil.SetToDomB(domBody, rownum, "iordercode", bd.iordercode);//销售订单号，string类型
                ENUtil.SetToDomB(domBody, rownum, "iorderseq", bd.iorderseq);//销售订单行号，string类型
                ENUtil.SetToDomB(domBody, rownum, "iexpiratdatecalcu", bd.iexpiratdatecalcu);//有效期推算方式，int类型
                ENUtil.SetToDomB(domBody, rownum, "cexpirationdate", bd.cexpirationdate);//有效期至，string类型
                ENUtil.SetToDomB(domBody, rownum, "dexpirationdate", bd.dexpirationdate);//有效期计算项，string类型
                ENUtil.SetToDomB(domBody, rownum, "cciqbookcode", bd.cciqbookcode);//手册号，string类型
                ENUtil.SetToDomB(domBody, rownum, "ibondedsumqty", bd.ibondedsumqty);//累计保税处理抽取数量，string类型
                ENUtil.SetToDomB(domBody, rownum, "copdesc", bd.copdesc);//工序说明，string类型
                ENUtil.SetToDomB(domBody, rownum, "cmworkcentercode", bd.cmworkcentercode);//工作中心编码，string类型
                ENUtil.SetToDomB(domBody, rownum, "cmworkcenter", bd.cmworkcenter);//工作中心，string类型
                ENUtil.SetToDomB(domBody, rownum, "isotype", bd.isotype);//需求跟踪方式，int类型
                ENUtil.SetToDomB(domBody, rownum, "cbaccounter", bd.cbaccounter);//记账人，string类型
                ENUtil.SetToDomB(domBody, rownum, "bcosting", bd.bcosting);//是否核算，string类型
                ENUtil.SetToDomB(domBody, rownum, "isoseq", bd.isoseq);//需求跟踪行号，string类型
                ENUtil.SetToDomB(domBody, rownum, "imoseq", bd.imoseq);//生产订单行号，string类型
                ENUtil.SetToDomB(domBody, rownum, "iopseq", bd.iopseq);//工序行号，string类型
                ENUtil.SetToDomB(domBody, rownum, "cdefine34", bd.cdefine34);//表体自定义项13，int类型
                ENUtil.SetToDomB(domBody, rownum, "cdefine35", bd.cdefine35);//表体自定义项14，int类型
                ENUtil.SetToDomB(domBody, rownum, "cdefine22", bd.cdefine22);//表体自定义项1，string类型
                ENUtil.SetToDomB(domBody, rownum, "cdefine28", bd.cdefine28);//表体自定义项7，string类型
                ENUtil.SetToDomB(domBody, rownum, "cdefine29", bd.cdefine29);//表体自定义项8，string类型
                ENUtil.SetToDomB(domBody, rownum, "cdefine30", bd.cdefine30);//表体自定义项9，string类型
                ENUtil.SetToDomB(domBody, rownum, "cdefine31", bd.cdefine31);//表体自定义项10，string类型
                ENUtil.SetToDomB(domBody, rownum, "cdefine32", bd.cdefine32);//表体自定义项11，string类型
                ENUtil.SetToDomB(domBody, rownum, "cdefine33", bd.cdefine33);//表体自定义项12，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvdefine4", bd.cinvdefine4);//存货自定义项4，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvdefine5", bd.cinvdefine5);//存货自定义项5，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvdefine6", bd.cinvdefine6);//存货自定义项6，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvdefine7", bd.cinvdefine7);//存货自定义项7，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvdefine8", bd.cinvdefine8);//存货自定义项8，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvdefine9", bd.cinvdefine9);//存货自定义项9，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvdefine10", bd.cinvdefine10);//存货自定义项10，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvdefine11", bd.cinvdefine11);//存货自定义项11，string类型
                ENUtil.SetToDomB(domBody, rownum, "cinvdefine12", bd.cinvdefine12);//存货自定义项12，string类型
                ENUtil.SetToDomB(domBody, rownum, "cbarcode", bd.cbarcode);//条形码，string类型
                ENUtil.SetToDomB(domBody, rownum, "cdefine23", bd.cdefine23);//表体自定义项2，string类型
                ENUtil.SetToDomB(domBody, rownum, "cdefine24", bd.cdefine24);//表体自定义项3，string类型
                ENUtil.SetToDomB(domBody, rownum, "cdefine25", bd.cdefine25);//表体自定义项4，string类型
                ENUtil.SetToDomB(domBody, rownum, "itrids", bd.itrids);//特殊单据子表标识，double类型
                ENUtil.SetToDomB(domBody, rownum, "cdefine26", bd.cdefine26);//表体自定义项5，double类型
                ENUtil.SetToDomB(domBody, rownum, "cdefine27", bd.cdefine27);//表体自定义项6，double类型
                ENUtil.SetToDomB(domBody, rownum, "citemcode", bd.citemcode);//项目编码，string类型
                ENUtil.SetToDomB(domBody, rownum, "cname", bd.cname);//项目，string类型
                ENUtil.SetToDomB(domBody, rownum, "citem_class", bd.citem_class);//项目大类编码，string类型
                ENUtil.SetToDomB(domBody, rownum, "citemcname", bd.citemcname);//项目大类名称，string类型
                rownum++;
            }

            //给普通参数domPosition赋值。此参数的数据类型为System.Object，此参数按引用传递，表示货位：传空
            broker.AssignNormalValue("domPosition", null);

            //该参数errMsg为OUT型参数，由于其数据类型为System.String，为一般值类型，因此不必传入一个参数变量。在API调用返回时，可以通过GetResult("errMsg")获取其值

            //给普通参数cnnFrom赋值。此参数的数据类型为ADODB.Connection，此参数按引用传递，表示连接对象,如果由调用方控制事务，则需要设置此连接对象，否则传空
            broker.AssignNormalValue("cnnFrom", null);

            //该参数VouchId为INOUT型普通参数。此参数的数据类型为System.String，此参数按值传递。在API调用返回时，可以通过GetResult("VouchId")获取其值
            broker.AssignNormalValue("VouchId", "");

            //该参数domMsg为OUT型参数，由于其数据类型为MSXML2.IXMLDOMDocument2，非一般值类型，因此必须传入一个参数变量。在API调用返回时，可以直接使用该参数
            //MSXML2.IXMLDOMDocument2 domMsg = new MSXML2.IXMLDOMDocument2();
            MSXML2.IXMLDOMDocument2 domMsg = new MSXML2.DOMDocumentClass();
            broker.AssignNormalValue("domMsg", domMsg);

            //给普通参数bCheck赋值。此参数的数据类型为System.Boolean，此参数按值传递，表示是否控制可用量。
            broker.AssignNormalValue("bCheck", false);

            //给普通参数bBeforCheckStock赋值。此参数的数据类型为System.Boolean，此参数按值传递，表示检查可用量
            broker.AssignNormalValue("bBeforCheckStock", false);

            //给普通参数bIsRedVouch赋值。此参数的数据类型为System.Boolean，此参数按值传递，表示是否红字单据
            broker.AssignNormalValue("bIsRedVouch", false);

            //给普通参数sAddedState赋值。此参数的数据类型为System.String，此参数按值传递，表示传空字符串
            broker.AssignNormalValue("sAddedState", "");

            //给普通参数bReMote赋值。此参数的数据类型为System.Boolean，此参数按值传递，表示是否远程：转入false
            broker.AssignNormalValue("bReMote", false);

            //第六步：调用API
            if (!broker.Invoke())
            {
                //错误处理
                Exception apiEx = broker.GetException();
                if (apiEx != null)
                {
                    if (apiEx is MomSysException)
                    {
                        MomSysException sysEx = apiEx as MomSysException;
                        Console.WriteLine("系统异常：" + sysEx.Message);
                        //todo:异常处理
                    }
                    else if (apiEx is MomBizException)
                    {
                        MomBizException bizEx = apiEx as MomBizException;
                        Console.WriteLine("API异常：" + bizEx.Message);
                        //todo:异常处理
                    }
                    //异常原因
                    String exReason = broker.GetExceptionString();
                    if (exReason.Length != 0)
                    {
                        Console.WriteLine("异常原因：" + exReason);
                    }
                }
                //结束本次调用，释放API资源
                broker.Release();
                string msg = "产成品入库单新增异常：" + broker.GetExceptionString();
                apiRet.Success = false;
                apiRet.ErrMsg = msg;
                return apiRet;
            }

            //第七步：获取返回结果
            //获取返回值
            //获取普通返回值。此返回值数据类型为System.Boolean，此参数按值传递，表示返回值:true:成功,false:失败
            System.Boolean result = Convert.ToBoolean(broker.GetReturnValue());

            //获取out/inout参数值
            //获取普通OUT参数errMsg。此返回值数据类型为System.String，在使用该参数之前，请判断是否为空
            System.String errMsgRet = broker.GetResult("errMsg") as System.String;

            //获取普通INOUT参数VouchId。此返回值数据类型为System.String，在使用该参数之前，请判断是否为空
            System.String VouchIdRet = broker.GetResult("VouchId") as System.String;

            //获取普通OUT参数domMsg。此返回值数据类型为MSXML2.IXMLDOMDocument2，在使用该参数之前，请判断是否为空
            MSXML2.IXMLDOMDocument2 domMsgRet = broker.GetResult("domMsg") as MSXML2.IXMLDOMDocument2;

            //结束本次调用，释放API资源
            broker.Release();

            //异常处理
            if (errMsgRet != null && !errMsgRet.Equals(""))
            {
                if (result)
                {
                    errMsgRet = "产成品入库单新增提示：" + errMsgRet;
                }
                else
                {
                    errMsgRet = "产成品入库单新增失败：" + errMsgRet;
                }
            }
            else
            {
                errMsgRet = "";
            }

            apiRet.Success = result;
            apiRet.ErrMsg = errMsgRet;
            apiRet.VouchId = VouchIdRet;
            return apiRet;
        }

        /// <summary>
        /// 审核单据
        /// </summary>
        /// <param name="u8Login"></param>
        /// <param name="conn"></param>
        /// <param name="vouchId">单据Id</param>
        /// <returns></returns>
        public String Audit(Object u8Login, String vouchId)
        {
            //第二步：构造环境上下文对象，传入login，并按需设置其它上下文参数
            U8EnvContext envContext = new U8EnvContext();
            envContext.U8Login = u8Login as U8Login.clsLogin;

            //第三步：设置API地址标识(Url)
            //当前API：审核单据的地址标识为：U8API/ProductIn/Audit
            U8ApiAddress myApiAddress = new U8ApiAddress("U8API/ProductIn/Audit");

            //第四步：构造APIBroker
            U8ApiBroker broker = new U8ApiBroker(myApiAddress, envContext);

            //第五步：API参数赋值

            //给普通参数sVouchType赋值。此参数的数据类型为System.String，此参数按值传递，表示单据类型：10
            broker.AssignNormalValue("sVouchType", "10");

            //给普通参数VouchId赋值。此参数的数据类型为System.String，此参数按值传递，表示单据Id
            broker.AssignNormalValue("VouchId", vouchId);

            //该参数errMsg为OUT型参数，由于其数据类型为System.String，为一般值类型，因此不必传入一个参数变量。在API调用返回时，可以通过GetResult("errMsg")获取其值

            //给普通参数cnnFrom赋值。此参数的数据类型为ADODB.Connection，此参数按引用传递，表示连接对象：调用方控制事务时需要传入连接对象
            broker.AssignNormalValue("cnnFrom", null);

            //给普通参数TimeStamp赋值。此参数的数据类型为System.Object，此参数按值传递，表示单据时间戳，用于检查单据是否修改，空串时不检查
            broker.AssignNormalValue("TimeStamp", null);

            //该参数domMsg为OUT型参数，由于其数据类型为MSXML2.IXMLDOMDocument2，非一般值类型，因此必须传入一个参数变量。在API调用返回时，可以直接使用该参数
            MSXML2.IXMLDOMDocument2 domMsg = new MSXML2.DOMDocumentClass();
            broker.AssignNormalValue("domMsg", domMsg);

            //给普通参数bCheck赋值。此参数的数据类型为System.Boolean，此参数按值传递，表示是否控制可用量
            broker.AssignNormalValue("bCheck", false);

            //给普通参数bBeforCheckStock赋值。此参数的数据类型为System.Boolean，此参数按值传递，表示检查可用量
            broker.AssignNormalValue("bBeforCheckStock", false);

            //给普通参数bList赋值。此参数的数据类型为System.Boolean，此参数按值传递，表示传入空串
            broker.AssignNormalValue("bList", false);

            //给普通参数MakeWheres赋值。此参数的数据类型为VBA.Collection，此参数按值传递，表示传空
            broker.AssignNormalValue("MakeWheres", null);

            //给普通参数sWebXml赋值。此参数的数据类型为System.String，此参数按值传递，表示传入空串
            broker.AssignNormalValue("sWebXml", "");

            //给普通参数oGenVouchIds赋值。此参数的数据类型为Scripting.IDictionary，此参数按值传递，表示返回审核时自动生成的单据的id列表,传空
            broker.AssignNormalValue("oGenVouchIds", null);

            //第六步：调用API
            if (!broker.Invoke())
            {
                //错误处理
                Exception apiEx = broker.GetException();
                if (apiEx != null)
                {
                    if (apiEx is MomSysException)
                    {
                        MomSysException sysEx = apiEx as MomSysException;
                        Console.WriteLine("系统异常：" + sysEx.Message);
                        //todo:异常处理
                    }
                    else if (apiEx is MomBizException)
                    {
                        MomBizException bizEx = apiEx as MomBizException;
                        Console.WriteLine("API异常：" + bizEx.Message);
                        //todo:异常处理
                    }
                    //异常原因
                    String exReason = broker.GetExceptionString();
                    if (exReason.Length != 0)
                    {
                        Console.WriteLine("异常原因：" + exReason);
                    }
                }
                //结束本次调用，释放API资源
                broker.Release();
                string msg = string.Format("产成品入库单审核异常({0})：", vouchId) + broker.GetExceptionString();
                return msg;
            }

            //第七步：获取返回结果

            //获取返回值
            //获取普通返回值。此返回值数据类型为System.Boolean，此参数按值传递，表示返回值:true,成功;false:失败
            System.Boolean result = Convert.ToBoolean(broker.GetReturnValue());

            //获取out/inout参数值

            //获取普通OUT参数errMsg。此返回值数据类型为System.String，在使用该参数之前，请判断是否为空
            System.String errMsgRet = broker.GetResult("errMsg") as System.String;

            //获取普通OUT参数domMsg。此返回值数据类型为MSXML2.IXMLDOMDocument2，在使用该参数之前，请判断是否为空
            MSXML2.IXMLDOMDocument2 domMsgRet = broker.GetResult("domMsg") as MSXML2.IXMLDOMDocument2;

            //结束本次调用，释放API资源
            broker.Release();

            //异常处理
            if (errMsgRet == null)
            {
                errMsgRet = "";
            }
            else if (!errMsgRet.Equals(""))
            {
                errMsgRet = string.Format("产成品入库单审核失败({0})：", vouchId) + errMsgRet;
            }
            return errMsgRet;
        }

        /// <summary>
        /// 删除单据
        /// </summary>
        /// <param name="u8Login"></param>
        /// <param name="vouchId"></param>
        /// <returns></returns>
        public String Delete(Object u8Login, String vouchId)
        {
            //第二步：构造环境上下文对象，传入login，并按需设置其它上下文参数
            U8EnvContext envContext = new U8EnvContext();
            envContext.U8Login = u8Login as U8Login.clsLogin;

            //第三步：设置API地址标识(Url)
            //当前API：删除单据的地址标识为：U8API/ProductIn/Delete
            U8ApiAddress myApiAddress = new U8ApiAddress("U8API/ProductIn/Delete");

            //第四步：构造APIBroker
            U8ApiBroker broker = new U8ApiBroker(myApiAddress, envContext);

            //第五步：API参数赋值

            //给普通参数sVouchType赋值。此参数的数据类型为System.String，此参数按值传递，表示单据类型:10
            broker.AssignNormalValue("sVouchType", "10");

            //给普通参数VouchId赋值。此参数的数据类型为System.String，此参数按值传递，表示单据Id
            broker.AssignNormalValue("VouchId", "vouchId");

            //该参数errMsg为OUT型参数，由于其数据类型为System.String，为一般值类型，因此不必传入一个参数变量。在API调用返回时，可以通过GetResult("errMsg")获取其值

            //给普通参数cnnFrom赋值。此参数的数据类型为ADODB.Connection，此参数按引用传递，表示连接对象:由调用方控制事务时需要传入连接对象
            broker.AssignNormalValue("cnnFrom", null);

            //给普通参数TimeStamp赋值。此参数的数据类型为System.Object，此参数按值传递，表示单据时间戳
            broker.AssignNormalValue("TimeStamp", null);

            //该参数domMsg为OUT型参数，由于其数据类型为MSXML2.IXMLDOMDocument2，非一般值类型，因此必须传入一个参数变量。在API调用返回时，可以直接使用该参数
            MSXML2.IXMLDOMDocument2 domMsg = new MSXML2.DOMDocumentClass();
            broker.AssignNormalValue("domMsg", domMsg);

            //给普通参数bCheck赋值。此参数的数据类型为System.Boolean，此参数按值传递，表示是否进行业务检查
            broker.AssignNormalValue("bCheck", false);

            //给普通参数bBeforCheckStock赋值。此参数的数据类型为System.Boolean，此参数按值传递，表示检查可用量
            broker.AssignNormalValue("bBeforCheckStock", false);

            //给普通参数bList赋值。此参数的数据类型为System.Boolean，此参数按值传递，表示传入false
            broker.AssignNormalValue("bList", false);

            //第六步：调用API
            if (!broker.Invoke())
            {
                //错误处理
                Exception apiEx = broker.GetException();
                if (apiEx != null)
                {
                    if (apiEx is MomSysException)
                    {
                        MomSysException sysEx = apiEx as MomSysException;
                        Console.WriteLine("系统异常：" + sysEx.Message);
                        //todo:异常处理
                    }
                    else if (apiEx is MomBizException)
                    {
                        MomBizException bizEx = apiEx as MomBizException;
                        Console.WriteLine("API异常：" + bizEx.Message);
                        //todo:异常处理
                    }
                    //异常原因
                    String exReason = broker.GetExceptionString();
                    if (exReason.Length != 0)
                    {
                        Console.WriteLine("异常原因：" + exReason);
                    }
                }
                //结束本次调用，释放API资源
                broker.Release();
                string msg = "产成品入库单删除异常：" + broker.GetExceptionString();
                return msg;
            }

            //第七步：获取返回结果

            //获取返回值
            //获取普通返回值。此返回值数据类型为System.Boolean，此参数按值传递，表示
            System.Boolean result = Convert.ToBoolean(broker.GetReturnValue());

            //获取out/inout参数值

            //获取普通OUT参数errMsg。此返回值数据类型为System.String，在使用该参数之前，请判断是否为空
            System.String errMsgRet = broker.GetResult("errMsg") as System.String;

            //获取普通OUT参数domMsg。此返回值数据类型为MSXML2.IXMLDOMDocument2，在使用该参数之前，请判断是否为空
            MSXML2.IXMLDOMDocument2 domMsgRet = broker.GetResult("domMsg") as MSXML2.IXMLDOMDocument2;

            //结束本次调用，释放API资源
            broker.Release();

            //异常处理
            if (errMsgRet != null && !errMsgRet.Equals(""))
            {
                errMsgRet = "产成品入库单删除失败：" + errMsgRet;
            }
            return errMsgRet;
        }
    }
}
